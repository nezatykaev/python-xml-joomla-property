"use strict"; !function (t, e, i, s) { var n = "spIcons"; function o(e, i) { return this.element = e, this.name = n, this._defaults = t.fn.spIcons.defaults, this.options = t.extend({}, this._defaults, i), null == this.options.icon_name ? (console.error("The icon name option is required"), !1) : this.options.allow_icon_prefix && null == this.options.icon_prefix ? (console.error("The icon prefix is required when icon prefix is allowed."), !1) : this.options.icons.length <= 0 ? (console.error("You must provide icons array. This is the icons which will be rendering"), !1) : (this.icon_copy = this.clone(this.options.icons), this._selected = this.trimSelectedValue(this.options.selected_icon) ? this.trimSelectedValue(this.options.selected_icon) : "", this.options.styling = t.extend({}, this.options.styling, this.options.styles), this.searching = !1, void this.init()) } t.extend(o.prototype, { init: function () { this.cacheElement(), this.createHtmlDom(), this.applyCustomCssDesigns(), this.initialization(this.icon_copy), "grid" == this.options.icon_view_style ? this.triggerOpenGridView() : "list" == this.options.icon_view_style ? this.triggerOpenListView() : console.error("Only grid and list view supported! Use grid or list only."), this.triggerSearchIcon() }, applyCustomCssDesigns: function () { this.$spicons.css({ width: this.options.container_width }) }, cacheElement: function () { this.$element = t(this.element) }, clearSelection() { let t = this; return function () { t.$spicons_icon_name.empty(), t.$spicons_icon_name.html(t.options.select_placeholder), t.$spicons_icon_name.addClass("hint"), t.$spicons_input.val(""), t.removeIconSelection(), t._selected = "", t.$spicons_clear.hide(), t.searching = !1, t.$scroller.scrollTop(0), t.$spicons_caret.hasClass("spcions-arrow-down") && t.$spicons_caret.removeClass("spicons-arrow-down").addClass("spicons-arrow-up") } }, clone: function (t) { return JSON.parse(JSON.stringify(t)) }, createIconComponent: function (e) { let s = i.createElement("li"); s.setAttribute("class", "list-icon"), s.setAttribute("title", this.options.allow_icon_prefix ? this.options.icon_prefix + " " + e : e), s.setAttribute("data-classname", this.options.allow_icon_prefix ? this.options.icon_prefix + " " + e : e), s.onclick = this.iconSelection(t(s)), this.$icon_container.append(s), this.$list_icon = t(s); let n = i.createElement("div"); "" != this._selected && this._selected == e ? n.setAttribute("class", "font-wrapper selected-icon") : n.setAttribute("class", "font-wrapper"), this.$list_icon.append(n), this.$font_wrapper = t(n); let o = i.createElement("div"); o.setAttribute("class", "font-container"), this.$font_wrapper.append(o), this.$font_container = t(o); let c = i.createElement("div"); c.setAttribute("class", "font-cell"), this.$font_container.append(c), this.$font_cell = t(c), this.$font_cell.css({ "font-size": this.options.styling.icon_font_size }); let l = i.createElement("i"); l.setAttribute("class", this.options.allow_icon_prefix ? this.options.icon_prefix + " " + e : e), this.$font_cell.append(l), this.$icon_display = t(l), this.$font_cell.css({ color: this.options.styling.icon_color }); let r = this; this.$font_wrapper.mouseenter(function () { let i = t(this); r._selected != e && (i.find(".font-cell").css({ color: r.options.styling.icon_hover_color }), i.css({ background: r.options.styling.icon_hover_background })) }), this.$font_wrapper.mouseleave(function () { let i = t(this); if (r._selected != e) { i.find(".font-cell")[0].style.setProperty("color", r.options.styling.icon_color, "important"), i.css({ background: "none" }) } }), this.$font_wrapper.hasClass("selected-icon") && (this.$font_wrapper.css({ background: this.options.styling.selected_icon_background }), this.$font_cell.css({ color: this.options.styling.selected_icon_color })) }, createIconComponentForListView: function (e) { let s = i.createElement("li"); s.setAttribute("class", "list-icon is-list"), s.setAttribute("title", this.options.allow_icon_prefix ? this.options.icon_prefix + " " + e : e), s.setAttribute("data-classname", this.options.allow_icon_prefix ? this.options.icon_prefix + " " + e : e), s.onclick = this.iconSelection(t(s)), this.$icon_container.append(s), this.$list_icon = t(s); let n = i.createElement("div"); "" != this._selected && this._selected == e ? n.setAttribute("class", "font-wrapper selected-icon is-list") : n.setAttribute("class", "font-wrapper is-list"), this.$list_icon.append(n), this.$font_wrapper = t(n); let o = i.createElement("div"); o.setAttribute("class", "font-container is-list"), this.$font_wrapper.append(o), this.$font_container = t(o); let c = i.createElement("div"); c.setAttribute("class", "font-cell is-list"), this.$font_container.append(c), this.$font_cell = t(c), this.$font_cell.css({ "font-size": this.options.styling.icon_font_size }); let l = i.createElement("i"); l.setAttribute("class", this.options.allow_icon_prefix ? this.options.icon_prefix + " " + e : e), this.$font_cell.append(l), this.$icon_display = t(l), this.$font_cell.css({ color: this.options.styling.icon_color }); let r = this, a = i.createElement("div"); a.setAttribute("class", "icon-info is-list"), this.$list_icon.append(a), this.$font_wrapper.css({ display: "inline-block" }), this.$icon_info = t(a), this.$icon_info.text(e), this.$list_icon.mouseenter(function () { let i = t(this); r._selected != e && (i.find(".font-cell").css({ color: r.options.styling.icon_hover_color }), i.find(".font-wrapper").css({ background: r.options.styling.icon_hover_background }), i.css({ background: "#F5F5F5" })) }), this.$list_icon.mouseleave(function () { let i = t(this); if (r._selected != e) { i.find(".font-cell")[0].style.setProperty("color", r.options.styling.icon_color, "important"), i.find(".font-wrapper").css({ background: "none" }), i.css({ background: "#fff" }) } }), this.$font_wrapper.hasClass("selected-icon") && (this.$font_wrapper.css({ background: this.options.styling.selected_icon_background }), this.$font_cell.css({ color: this.options.styling.selected_icon_color })) }, createHtmlDom: function () { let e = i.createElement("div"); e.setAttribute("class", "spicons"), this.$spicons = t(e); let s = i.createElement("div"); s.setAttribute("class", "spicons-wrapper"), this.$spicons.append(s), this.$spicons_wrapper = t(s); let n = i.createElement("div"); n.setAttribute("class", "spicons-header"), this.$spicons_wrapper.append(n), this.$spicons_header = t(n); let o = i.createElement("div"); o.setAttribute("class", "spicons-icon-contaner"), this.$spicons_header.append(o), this.$spicons_icon_container = t(o); let c = i.createElement("span"); c.setAttribute("class", "spicons-icon"); let l = i.createElement("span"); if ("" != this._selected) { l.setAttribute("class", "spicons-icon-name"); let t = i.createElement("i"); t.setAttribute("class", this.options.allow_icon_prefix ? this.options.icon_prefix + " " + this._selected : this._selected), l.append(t), t.setAttribute("style", "color: " + this.options.styling.header_icon_color), l.innerHTML += " " + (this.options.allow_icon_prefix ? this.options.icon_prefix + " " + this._selected : this._selected) } else l.setAttribute("class", "spicons-icon-name hint"), l.innerHTML = this.options.select_placeholder; let r = i.createElement("input"); r.type = "hidden", r.name = this.options.input_name, r.setAttribute("class", "spicons-input"), "" != this._selected ? r.setAttribute("value", this._selected) : r.setAttribute("value", ""), this.$spicons_header.append(r), this.$spicons_input = t(r), this.$spicons_icon_container.append(c), this.$spicons_icon_container.append(l), this.$spicons_icon = t(c), this.$spicons_icon_name = t(l); let a = i.createElement("span"); a.setAttribute("class", "pull-right"), this.$spicons_icon_container.append(a), this.$pull_right = t(a); let p = i.createElement("span"); p.setAttribute("class", "spicons-clear"), p.innerHTML = "X", p.onclick = this.clearSelection(); let h = i.createElement("span"); h.setAttribute("class", "spicons-arrow-down spicons-caret"), this.$pull_right.append(p), this.$pull_right.append(h), this.$spicons_clear = t(p), this.$spicons_caret = t(h), "" != this._selected ? this.$spicons_clear.show() : this.$spicons_clear.hide(); let _ = i.createElement("div"); _.setAttribute("class", "spicons-body"), _.setAttribute("style", "display: none;"), this.$spicons_wrapper.append(_), this.$spicons_body = t(_); let d = i.createElement("input"); d.setAttribute("class", "search"), d.setAttribute("placeholder", this.options.search_placeholder), this.$spicons_body.append(d), this.$search = t(d); let u = i.createElement("div"); u.setAttribute("class", "scroller"), this.$spicons_body.append(u), this.$scroller = t(u); let f = i.createElement("ul"); "list" == this.options.icon_view_style ? (f.setAttribute("class", "icon-container is-list"), t(f).css({ width: parseInt(this.options.container_width) - 50 + "px" })) : f.setAttribute("class", "icon-container"), this.$scroller.append(f), this.$icon_container = t(f), this.$element.append(this.$spicons) }, iconSelection(t) { let e = this; return function () { e.$spicons_icon_name.html(""); let s = i.createElement("i"); s.setAttribute("class", t.data("classname")), s.setAttribute("style", "color: " + e.options.styling.header_icon_color), e.$spicons_icon_name.append(s), e.$spicons_icon_name.html(e.$spicons_icon_name.html() + " " + t.data("classname")), e.$spicons_input.val(t.data("classname")), e.$spicons_icon_name.removeClass("hint"), e.$spicons_body.hide(), e.$spicons_clear.show(), e.removeIconSelection(), e._selected = "", e._selected = e.trimSelectedValue(t.data("classname")), e.$spicons_caret.hasClass("spicons-arrow-up") && e.$spicons_caret.removeClass("spicons-arrow-up").addClass("spicons-arrow-down") } }, initialization: function (t) { let e = t.splice(0, this.options.icon_limit); this.renderIcons(e), t.length > 0 && this.scrollingAndLoading(t) }, loadMore: function (t, e) { let i = []; return t.length > 0 && (i = t.splice(0, e)) }, reloadIconContainer: function () { this.$icon_container.empty() }, removeIconSelection: function () { t(".selected-icon").removeClass("selected-icon") }, renderIcons: function (t) { var e = this; t.forEach(function (t) { "list" == e.options.icon_view_style ? e.$icon_container.append(e.createIconComponentForListView(t)) : e.$icon_container.append(e.createIconComponent(t)) }) }, scrollingAndLoading: function (e) { let i = this; this.$scroller.on("scroll", function () { let s = t(this); if (s.scrollTop() + s.innerHeight() >= s[0].scrollHeight) { let t = i.loadMore(e, i.options.icon_limit); if (!1 === t) return !1; i.renderIcons(t) } }) }, searchIcon: function (t, e) { let i = [], s = t.length; for (let n = 0; n < s; n++)-1 !== t[n].indexOf(e) && i.push(t[n]); return i }, triggerOpenGridView: function () { var t = this; this.$spicons_header.on("click", function (e) { if (e.preventDefault(), e.stopPropagation(), t.searching = !1, t.$scroller.scrollTop(0), t.options.restart && !t.searching) { t.$search.val(""); let e = t.clone(t.options.icons); t.reloadIconContainer(), t.initialization(e) } t.$spicons_body.toggle(), t.$spicons_caret.toggleClass("spicons-arrow-down spicons-arrow-up"), t.$search.focus() }) }, triggerOpenListView: function () { var t = this; this.$spicons_header.on("click", function (e) { if (e.preventDefault(), e.stopPropagation(), t.searching = !1, t.$scroller.scrollTop(0), t.options.restart && !t.searching) { t.$search.val(""); let e = t.clone(t.options.icons); t.reloadIconContainer(), t.initialization(e) } t.$spicons_body.toggle(), t.$spicons_caret.toggleClass("spicons-arrow-down spicons-arrow-up"), t.$search.focus() }) }, triggerSearchIcon: function () { let e = this; this.$search.on("keyup", function (i) { i.preventDefault(), e.$scroller.off("scroll"); let s = t(this); setTimeout(function () { e.reloadIconContainer(); let t = s.val(); if (e.$scroller.scrollTop(0), "" == t) { let t = e.clone(e.options.icons); e.initialization(t), e.searching = !1 } else { let i = []; e.searching = !0, i = e.clone(e.searchIcon(e.options.icons, t)), e.initialization(i) } }, 500) }) }, trimSelectedValue: function (t) { if (void 0 !== t && "" != t) { let e = t.split(" "); return e.length > 1 ? e[1] : t } return !1 } }), t.fn.spIcons = function (e) { return this.each(function () { t.data(this, n) || t.data(this, n, new o(this, e)) }), this }, t.fn.spIcons.defaults = { icon_name: null, icon_prefix: null, icon_view_style: "grid", select_placeholder: "Select icon...", search_placeholder: "Search", input_name: "spicons_input", allow_icon_prefix: !0, container_width: "400px", selected_icon: "", restart: !0, icon_limit: 100, styles: {}, styling: { icon_font_size: "initial", icon_color: "#f08080", icon_hover_background: "#92278F", icon_hover_color: "#FFF", selected_icon_color: "#FFF", selected_icon_background: "#92278F", header_icon_color: "#000" }, icons: [] } }(jQuery, window, document);